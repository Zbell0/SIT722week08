# week08/.github/workflows/master-orchestration.yml

name: Master CI/CD Orchestration

on:
  # Trigger on pushes to main and develop branches
  push:
    branches: [main, develop]

  # Allow manual trigger with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - production
      force-deploy:
        description: "Force deployment even if no changes detected"
        required: false
        default: false
        type: boolean

# Define global environment variables
env:
  ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
  FORCE_DEPLOY: ${{ github.event.inputs.force-deploy || 'false' }}

jobs:
  # Detect changes and determine what needs to be deployed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend-changed }}
      frontend-changed: ${{ steps.changes.outputs.frontend-changed }}
      should-deploy-backend: ${{ steps.decision.outputs.should-deploy-backend }}
      should-deploy-frontend: ${{ steps.decision.outputs.should-deploy-frontend }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changes
        id: changes
        run: |
          echo "Detecting changes for ${{ env.ENVIRONMENT }} deployment..."

          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ env.FORCE_DEPLOY }}" == "true" ]]; then
            echo "Force deployment requested - deploying all services"
            echo "backend-changed=true" >> $GITHUB_OUTPUT
            echo "frontend-changed=true" >> $GITHUB_OUTPUT
          else
            # Get list of changed files since last deployment
            if [[ "${{ github.event_name }}" == "push" ]]; then
              # For push events, check changes in the last commit
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            else
              # For manual dispatch, check recent changes
              CHANGED_FILES=$(git diff --name-only HEAD~5 HEAD)
            fi
            
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # Check for backend changes
            if echo "$CHANGED_FILES" | grep -q "^backend/"; then
              echo "backend-changed=true" >> $GITHUB_OUTPUT
              echo "Backend services changed"
            else
              echo "backend-changed=false" >> $GITHUB_OUTPUT
              echo "No backend changes detected"
            fi
            
            # Check for frontend changes
            if echo "$CHANGED_FILES" | grep -q "^frontend/"; then
              echo "frontend-changed=true" >> $GITHUB_OUTPUT
              echo "Frontend changed"
            else
              echo "frontend-changed=false" >> $GITHUB_OUTPUT
              echo "No frontend changes detected"
            fi
          fi

      - name: Deployment Decision
        id: decision
        run: |
          echo "Making deployment decisions..."

          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop") ]]; then
            # Automatic deployment on push to main/develop
            if [[ "${{ steps.changes.outputs.backend-changed }}" == "true" ]]; then
              echo "should-deploy-backend=true" >> $GITHUB_OUTPUT
              echo "Backend will be deployed"
            else
              echo "should-deploy-backend=false" >> $GITHUB_OUTPUT
              echo "Backend deployment skipped - no changes"
            fi
            
            if [[ "${{ steps.changes.outputs.frontend-changed }}" == "true" ]]; then
              echo "should-deploy-frontend=true" >> $GITHUB_OUTPUT
              echo "Frontend will be deployed"
            else
              echo "should-deploy-frontend=false" >> $GITHUB_OUTPUT
              echo "Frontend deployment skipped - no changes"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual deployment
            echo "should-deploy-backend=true" >> $GITHUB_OUTPUT
            echo "should-deploy-frontend=true" >> $GITHUB_OUTPUT
            echo "Manual deployment - all services will be deployed"
          else
            echo "should-deploy-backend=false" >> $GITHUB_OUTPUT
            echo "should-deploy-frontend=false" >> $GITHUB_OUTPUT
            echo "No deployment needed"
          fi

  # Backend Pipeline
  backend-pipeline:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy-backend == 'true'
    uses: ./.github/workflows/backend-pipeline.yml
    secrets: inherit

  # Frontend Pipeline (depends on backend)
  frontend-pipeline:
    needs: [detect-changes, backend-pipeline]
    if: always() && needs.detect-changes.outputs.should-deploy-frontend == 'true'
    uses: ./.github/workflows/frontend-pipeline.yml
    with:
      product-ip: ${{ needs.backend-pipeline.outputs.product-ip || 'auto-detect' }}
      order-ip: ${{ needs.backend-pipeline.outputs.order-ip || 'auto-detect' }}
      environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    secrets: inherit

  # Health Check and Monitoring
  health-check:
    needs: [detect-changes, backend-pipeline, frontend-pipeline]
    if: always() && (needs.backend-pipeline.result == 'success' || needs.frontend-pipeline.result == 'success')
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        run: |
          # Azure login
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

          # Set Kubernetes context
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            AKS_CLUSTER="${{ secrets.PROD_AKS_CLUSTER }}"
            RESOURCE_GROUP="${{ secrets.PROD_RESOURCE_GROUP }}"
          else
            AKS_CLUSTER="${{ secrets.DEV_AKS_CLUSTER }}"
            RESOURCE_GROUP="${{ secrets.DEV_RESOURCE_GROUP }}"
          fi

          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER --overwrite-existing

      - name: Health Check - Backend Services
        if: needs.backend-pipeline.result == 'success'
        run: |
          echo "Checking backend service health..."

          # Check if services are running
          kubectl get pods -l app=product-service
          kubectl get pods -l app=order-service

          # Check service endpoints
          PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")

          if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
            echo "✅ Backend services are healthy"
            echo "Product Service: http://$PRODUCT_IP:8000"
            echo "Order Service: http://$ORDER_IP:8001"
          else
            echo "❌ Backend services health check failed"
            exit 1
          fi

      - name: Health Check - Frontend Service
        if: needs.frontend-pipeline.result == 'success'
        run: |
          echo "Checking frontend service health..."

          # Check if frontend is running
          kubectl get pods -l app=frontend

          # Check frontend service
          FRONTEND_IP=$(kubectl get service frontend-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")

          if [[ -n "$FRONTEND_IP" ]]; then
            echo "✅ Frontend service is healthy"
            echo "Frontend: http://$FRONTEND_IP"
          else
            echo "❌ Frontend service health check failed"
            exit 1
          fi

      - name: Integration Test
        run: |
          echo "Running integration tests..."

          # Get service IPs
          PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          FRONTEND_IP=$(kubectl get service frontend-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")

          if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" && -n "$FRONTEND_IP" ]]; then
            echo "Testing service connectivity..."
            
            # Test product service
            if curl -f -s "http://$PRODUCT_IP:8000/health" > /dev/null; then
              echo "✅ Product service is responding"
            else
              echo "❌ Product service health check failed"
              exit 1
            fi
            
            # Test order service
            if curl -f -s "http://$ORDER_IP:8001/health" > /dev/null; then
              echo "✅ Order service is responding"
            else
              echo "❌ Order service health check failed"
              exit 1
            fi
            
            # Test frontend
            if curl -f -s "http://$FRONTEND_IP" > /dev/null; then
              echo "✅ Frontend is responding"
            else
              echo "❌ Frontend health check failed"
              exit 1
            fi
            
            echo "🎉 All integration tests passed!"
          else
            echo "❌ Integration test failed - service IPs not available"
            exit 1
          fi

      - name: Logout from Azure
        run: az logout
        if: always()

  # Deployment Summary
  deployment-summary:
    needs: [detect-changes, backend-pipeline, frontend-pipeline, health-check]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Deployment Summary
        run: |
          echo "=== Deployment Summary ==="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Changes detected:"
          echo "- Backend: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend-changed }}"
          echo ""
          echo "Deployment results:"
          echo "- Backend: ${{ needs.backend-pipeline.result }}"
          echo "- Frontend: ${{ needs.frontend-pipeline.result }}"
          echo "- Health Check: ${{ needs.health-check.result }}"
          echo ""

          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "🎉 Deployment completed successfully!"
            echo "Services are healthy and ready to use."
          else
            echo "❌ Deployment completed with issues."
            echo "Please check the logs for details."
          fi
