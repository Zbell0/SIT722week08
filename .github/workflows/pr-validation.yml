# week08/.github/workflows/pr-validation.yml

name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Detect which services have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend-changed }}
      frontend-changed: ${{ steps.changes.outputs.frontend-changed }}
      workflow-changed: ${{ steps.changes.outputs.workflow-changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changes
        id: changes
        run: |
          echo "Detecting changes in PR #${{ github.event.number }}..."

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check for backend changes
          if echo "$CHANGED_FILES" | grep -q "^backend/"; then
            echo "backend-changed=true" >> $GITHUB_OUTPUT
            echo "Backend services changed"
          else
            echo "backend-changed=false" >> $GITHUB_OUTPUT
            echo "No backend changes detected"
          fi

          # Check for frontend changes
          if echo "$CHANGED_FILES" | grep -q "^frontend/"; then
            echo "frontend-changed=true" >> $GITHUB_OUTPUT
            echo "Frontend changed"
          else
            echo "frontend-changed=false" >> $GITHUB_OUTPUT
            echo "No frontend changes detected"
          fi

          # Check for workflow changes
          if echo "$CHANGED_FILES" | grep -q "^\.github/workflows/"; then
            echo "workflow-changed=true" >> $GITHUB_OUTPUT
            echo "Workflow files changed"
          else
            echo "workflow-changed=false" >> $GITHUB_OUTPUT
            echo "No workflow changes detected"
          fi

  # Backend validation
  validate-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest

    services:
      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx flake8 black

      - name: Code Quality Check - Linting
        run: |
          echo "Running code quality checks..."
          for service in backend/*/; do
            if [ -d "$service" ]; then
              echo "Linting $service"
              flake8 "$service" --max-line-length=100 --ignore=E203,W503 || true
            fi
          done

      - name: Code Quality Check - Formatting
        run: |
          echo "Checking code formatting..."
          for service in backend/*/; do
            if [ -d "$service" ]; then
              echo "Checking formatting for $service"
              black --check "$service" || echo "Formatting issues found in $service"
            fi
          done

      - name: Run Product Service Tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          echo "Running product service tests..."
          pytest tests --maxfail=1 --disable-warnings -v --tb=short

      - name: Run Order Service Tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          echo "Running order service tests..."
          pytest tests --maxfail=1 --disable-warnings -v --tb=short

      - name: Security Scan
        run: |
          echo "Running security scan..."
          pip install bandit safety

          # Run bandit security scan
          for service in backend/*/; do
            if [ -d "$service" ]; then
              echo "Security scanning $service"
              bandit -r "$service" -f json -o "${service}bandit-report.json" || true
            fi
          done

          # Check for known security vulnerabilities
          safety check --json || true

  # Frontend validation
  validate-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Frontend Files
        run: |
          echo "Validating frontend files..."

          # Check if required files exist
          REQUIRED_FILES=("frontend/main.js" "frontend/index.html" "frontend/nginx.conf" "frontend/Dockerfile")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
            echo "✓ $file exists"
          done

      - name: Validate JavaScript Syntax
        run: |
          echo "Validating JavaScript syntax..."

          # Check if Node.js is available for syntax validation
          if command -v node >/dev/null 2>&1; then
            # Basic syntax check
            node -c frontend/main.js
            echo "✓ JavaScript syntax is valid"
          else
            echo "Node.js not available, skipping syntax check"
          fi

      - name: Validate HTML Structure
        run: |
          echo "Validating HTML structure..."

          # Basic HTML validation
          if grep -q "<!DOCTYPE html>" frontend/index.html; then
            echo "✓ HTML DOCTYPE found"
          else
            echo "Warning: HTML DOCTYPE not found"
          fi

          if grep -q "<html" frontend/index.html; then
            echo "✓ HTML tag found"
          else
            echo "Error: HTML tag not found"
            exit 1
          fi

      - name: Validate Nginx Configuration
        run: |
          echo "Validating Nginx configuration..."

          # Basic nginx config validation
          if grep -q "server {" frontend/nginx.conf; then
            echo "✓ Nginx server block found"
          else
            echo "Error: Nginx server block not found"
            exit 1
          fi

      - name: Test Docker Build
        run: |
          echo "Testing Docker build..."

          # Test if Dockerfile can build successfully
          docker build -t test-frontend ./frontend/
          echo "✓ Docker build successful"

  # Workflow validation
  validate-workflows:
    needs: detect-changes
    if: needs.detect-changes.outputs.workflow-changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Workflow Syntax
        run: |
          echo "Validating workflow syntax..."

          # Check if workflow files have valid YAML syntax
          for workflow in .github/workflows/*.yml; do
            if [ -f "$workflow" ]; then
              echo "Validating $workflow"
              python -c "import yaml; yaml.safe_load(open('$workflow'))"
              echo "✓ $workflow syntax is valid"
            fi
          done

      - name: Check Workflow Dependencies
        run: |
          echo "Checking workflow dependencies..."

          # Check for common workflow issues
          for workflow in .github/workflows/*.yml; do
            if [ -f "$workflow" ]; then
              echo "Checking $workflow"
              
              # Check if workflow has proper triggers
              if grep -q "on:" "$workflow"; then
                echo "✓ $workflow has trigger configuration"
              else
                echo "Warning: $workflow may be missing trigger configuration"
              fi
              
              # Check for hardcoded values that should be secrets
              if grep -q "hardcoded\|localhost\|127.0.0.1" "$workflow"; then
                echo "Warning: $workflow may contain hardcoded values"
              fi
            fi
          done

  # Summary job
  validation-summary:
    needs:
      [detect-changes, validate-backend, validate-frontend, validate-workflows]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Validation Summary
        run: |
          echo "=== Pull Request Validation Summary ==="
          echo "PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}"
          echo "Base branch: ${{ github.base_ref }}"
          echo "Head branch: ${{ github.head_ref }}"
          echo ""
          echo "Changes detected:"
          echo "- Backend: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend-changed }}"
          echo "- Workflows: ${{ needs.detect-changes.outputs.workflow-changed }}"
          echo ""
          echo "Validation results:"
          echo "- Backend validation: ${{ needs.validate-backend.result }}"
          echo "- Frontend validation: ${{ needs.validate-frontend.result }}"
          echo "- Workflow validation: ${{ needs.validate-workflows.result }}"
          echo ""

          # Determine overall status
          if [[ "${{ needs.validate-backend.result }}" == "success" || "${{ needs.detect-changes.outputs.backend-changed }}" == "false" ]] && \
             [[ "${{ needs.validate-frontend.result }}" == "success" || "${{ needs.detect-changes.outputs.frontend-changed }}" == "false" ]] && \
             [[ "${{ needs.validate-workflows.result }}" == "success" || "${{ needs.detect-changes.outputs.workflow-changed }}" == "false" ]]; then
            echo "All validations passed!"
            exit 0
          else
            echo "Some validations failed!"
            exit 1
          fi
